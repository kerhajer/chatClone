{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst createConfig = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    return {\n      headers: {\n        token\n      }\n    };\n  } else {\n    return {};\n  }\n};\nexport const chatbot = createAsyncThunk('chat/chatbot', async ({\n  text\n}, {\n  rejectWithValue\n}) => {\n  const config = createConfig();\n  try {\n    const {\n      data\n    } = await axios.post('http://localhost:5000/api/chat/chatbot', {\n      text\n    }, config);\n    return data;\n  } catch (error) {\n    // Log the error message\n    console.error('Error adding facture:', error);\n    return rejectWithValue(error.response.data.message);\n  }\n});\nconst initialState = {\n  isLoading: false,\n  registerErrors: null,\n  msg: null,\n  chat: localStorage.getItem('ytc-chat') ? JSON.parse(localStorage.getItem('ytc-chat')) : []\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    resetChatState: state => {\n      state.isLoading = false;\n      state.registerErrors = null;\n      state.chat = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(chatbot.pending, state => {\n      state.isLoading = true;\n    }).addCase(chatbot.fulfilled, (state, {\n      type,\n      payload\n    }) => {\n      state.isLoading = false;\n      state.chat = payload.generatedContent;\n    }).addCase(chatbot.rejected, (state, {\n      type,\n      payload\n    }) => {});\n  }\n});\nexport const {\n  resetChatState\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","createConfig","token","localStorage","getItem","headers","chatbot","text","rejectWithValue","config","data","post","error","console","response","message","initialState","isLoading","registerErrors","msg","chat","JSON","parse","chatSlice","name","reducers","resetChatState","state","extraReducers","builder","addCase","pending","fulfilled","type","payload","generatedContent","rejected","actions","reducer"],"sources":["C:/Users/Hajer/Desktop/chatgptclone/client/src/Redux/ChatSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst createConfig = () => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      return {\r\n        headers: {\r\n          token\r\n        }\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  export const chatbot = createAsyncThunk('chat/chatbot', async ( { text }, { rejectWithValue }) => {\r\n    const config = createConfig();\r\n  \r\n    try {\r\n  \r\n  \r\n      const { data } = await axios.post('http://localhost:5000/api/chat/chatbot', { text } , config);\r\n  \r\n      return data;\r\n    } catch (error) {\r\n      // Log the error message\r\n      console.error('Error adding facture:', error);\r\n  \r\n      return rejectWithValue(error.response.data.message);\r\n    }\r\n  });\r\n\r\n \r\n\r\n\r\nconst initialState = {\r\n\r\n  isLoading: false,\r\n  registerErrors: null,\r\n  msg: null,\r\n  chat:localStorage.getItem('ytc-chat') ? JSON.parse(localStorage.getItem('ytc-chat')) : [ ],\r\n};\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n  \r\n    resetChatState: (state) => {\r\n        state.isLoading = false;\r\n        state.registerErrors = null;\r\n        state.chat = [];\r\n      },\r\n\r\n\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(chatbot.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(chatbot.fulfilled, (state, { type, payload }) => {\r\n        state.isLoading = false;\r\n        \r\n        state.chat = payload.generatedContent\r\n       \r\n      })\r\n      .addCase(chatbot.rejected, (state, { type, payload }) => {\r\n      })\r\n     \r\n\r\n\r\n\r\n\r\n\r\n      \r\n  }\r\n\r\n});\r\n\r\nexport const { resetChatState } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT,OAAO;MACLG,OAAO,EAAE;QACPH;MACF;IACF,CAAC;EACH,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAKD,OAAO,MAAMI,OAAO,GAAGP,gBAAgB,CAAC,cAAc,EAAE,OAAQ;EAAEQ;AAAK,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChG,MAAMC,MAAM,GAAGR,YAAY,CAAC,CAAC;EAE7B,IAAI;IAGF,MAAM;MAAES;IAAK,CAAC,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,wCAAwC,EAAE;MAAEJ;IAAK,CAAC,EAAGE,MAAM,CAAC;IAE9F,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAE7C,OAAOJ,eAAe,CAACI,KAAK,CAACE,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;EACrD;AACF,CAAC,CAAC;AAKJ,MAAMC,YAAY,GAAG;EAEnBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,IAAI;EACpBC,GAAG,EAAE,IAAI;EACTC,IAAI,EAACjB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GAAGiB,IAAI,CAACC,KAAK,CAACnB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG;AACzF,CAAC;AAED,MAAMmB,SAAS,GAAGzB,WAAW,CAAC;EAC5B0B,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IAERC,cAAc,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACV,SAAS,GAAG,KAAK;MACvBU,KAAK,CAACT,cAAc,GAAG,IAAI;MAC3BS,KAAK,CAACP,IAAI,GAAG,EAAE;IACjB;EAGJ,CAAC;EACDQ,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACxB,OAAO,CAACyB,OAAO,EAAGJ,KAAK,IAAK;MACnCA,KAAK,CAACV,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDa,OAAO,CAACxB,OAAO,CAAC0B,SAAS,EAAE,CAACL,KAAK,EAAE;MAAEM,IAAI;MAAEC;IAAQ,CAAC,KAAK;MACxDP,KAAK,CAACV,SAAS,GAAG,KAAK;MAEvBU,KAAK,CAACP,IAAI,GAAGc,OAAO,CAACC,gBAAgB;IAEvC,CAAC,CAAC,CACDL,OAAO,CAACxB,OAAO,CAAC8B,QAAQ,EAAE,CAACT,KAAK,EAAE;MAAEM,IAAI;MAAEC;IAAQ,CAAC,KAAK,CACzD,CAAC,CAAC;EAQN;AAEF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAe,CAAC,GAAGH,SAAS,CAACc,OAAO;AAEnD,eAAed,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}